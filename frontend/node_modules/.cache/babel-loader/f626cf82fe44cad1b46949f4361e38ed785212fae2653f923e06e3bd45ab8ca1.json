{"ast":null,"code":"require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst db = require('./db');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst multer = require('multer');\n\n// Configure multer to store files in memory\nconst upload = multer({\n  storage: multer.memoryStorage()\n});\nconst app = express();\n\n// --- Middleware ---\napp.use(cors());\napp.use(express.json());\n\n// Request logger middleware for debugging\napp.use((req, res, next) => {\n  console.log(`${new Date().toISOString()} - ${req.method} ${req.originalUrl}`);\n  next();\n});\n\n// --- JWT Authentication Middleware (More Robust) ---\nconst authenticateJWT = (req, res, next) => {\n  const authHeader = req.headers.authorization;\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({\n      msg: 'Authorization denied. Token is missing or malformed.'\n    });\n  }\n  const token = authHeader.split(' ')[1];\n  if (!process.env.JWT_SECRET) {\n    console.error('FATAL ERROR: JWT_SECRET is not defined in the environment variables.');\n    return res.status(500).json({\n      msg: 'Server configuration error.'\n    });\n  }\n  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {\n    if (err) {\n      console.error('JWT Verification Error:', err.message);\n      return res.status(401).json({\n        msg: 'Token is not valid or has expired.'\n      });\n    }\n    if (!decoded || !decoded.user || !decoded.user.id) {\n      console.error('Invalid token payload:', decoded);\n      return res.status(401).json({\n        msg: 'Token payload is invalid.'\n      });\n    }\n    req.user = decoded.user;\n    next();\n  });\n};\n\n// --- COURSE ROUTES ---\n\n// Get all courses (Public)\napp.get('/api/v1/courses', async (req, res) => {\n  try {\n    const result = await db.query(`\n        SELECT \n            c.\"Course_ID\", c.\"Title\", c.\"Description\", c.\"Price\", \n            p.\"Name\" as instructor, encode(c.\"Thumbnail\", 'base64') as thumbnail_base64 \n        FROM \"Course\" c\n        JOIN \"Person\" p ON c.\"Author_ID\" = p.\"Person_ID\"\n        ORDER BY c.\"Creation_Date\" DESC\n    `);\n    res.status(200).json({\n      status: 'success',\n      results: result.rows.length,\n      data: {\n        courses: result.rows\n      }\n    });\n  } catch (err) {\n    console.error('Error fetching all courses:', err.message);\n    res.status(500).json({\n      msg: 'Server Error'\n    });\n  }\n});\n\n// Get a single course's full details (Public)\napp.get('/api/v1/courses/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const courseResult = await db.query(`SELECT c.\"Title\", c.\"Description\", c.\"Price\", p.\"Name\" as \"instructorName\",\n                    v.\"Link\" as \"trailerLink\", encode(c.\"Thumbnail\", 'base64') as \"thumbnail_base64\"\n             FROM \"Course\" c\n             JOIN \"Person\" p ON c.\"Author_ID\" = p.\"Person_ID\"\n             LEFT JOIN \"Video\" v ON c.\"Trailer_ID\" = v.\"Video_ID\"\n             WHERE c.\"Course_ID\" = $1`, [id]);\n    if (courseResult.rows.length === 0) return res.status(404).json({\n      error: 'Course not found'\n    });\n    const course = courseResult.rows[0];\n    const subtopicsResult = await db.query('SELECT \"Sub_Topic_ID\", \"Title\" FROM \"Sub_Topic\" WHERE \"Course_ID\" = $1 ORDER BY \"Sub_Topic_ID\"', [id]);\n    const subtopics = await Promise.all(subtopicsResult.rows.map(async sub => {\n      const videosResult = await db.query('SELECT \"Title\" FROM \"Video\" WHERE \"Sub_Topic_ID\" = $1 ORDER BY \"Video_ID\"', [sub.Sub_Topic_ID]);\n      const examsResult = await db.query('SELECT \"Exam_Link\" FROM \"Exam\" WHERE \"Sub_Topic_ID\" = $1 ORDER BY \"Exam_ID\"', [sub.Sub_Topic_ID]);\n      return {\n        id: sub.Sub_Topic_ID,\n        title: sub.Title,\n        videos: videosResult.rows.map(v => v.Title),\n        exams: examsResult.rows.map((e, i) => `Quiz ${i + 1}`)\n      };\n    }));\n    res.json({\n      id: parseInt(id),\n      title: course.Title,\n      description: course.Description,\n      price: course.Price,\n      instructor: course.instructorName,\n      trailerLink: course.trailerLink,\n      thumbnail_base64: course.thumbnail_base64,\n      structure: subtopics,\n      rating: 4.7,\n      reviews: (Math.random() * 2000).toFixed(0)\n    });\n  } catch (err) {\n    console.error(`Error fetching course ${id}:`, err.message);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\n\n// --- AUTH ROUTES ---\n\napp.post('/api/auth/register', async (req, res) => {\n  const {\n    fullName,\n    email,\n    password,\n    birthdate,\n    district,\n    city,\n    country\n  } = req.body;\n  try {\n    const userExists = await db.query('SELECT * FROM \"Person\" WHERE \"Email\" = $1', [email]);\n    if (userExists.rows.length > 0) return res.status(400).json({\n      msg: 'User already exists'\n    });\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n    const newUser = await db.query('INSERT INTO \"Person\" (\"Name\", \"Email\", \"Password\", \"Birth_Date\", \"District\", \"City\", \"Country\") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING \"Person_ID\", \"Name\", \"Email\"', [fullName, email, hashedPassword, birthdate, district, city, country]);\n    const user = newUser.rows[0];\n    await db.query('INSERT INTO \"Student\" (\"Student_ID\", \"Class\", \"Is_Banned\") VALUES ($1, $2, $3)', [user.Person_ID, 'General', false]);\n    const payload = {\n      user: {\n        id: user.Person_ID\n      }\n    };\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\n      expiresIn: '5h'\n    });\n    res.status(201).json({\n      token,\n      user: {\n        id: user.Person_ID,\n        name: user.Name,\n        email: user.Email\n      }\n    });\n  } catch (err) {\n    console.error('Registration error:', err.message);\n    res.status(500).json({\n      msg: 'Server Error'\n    });\n  }\n});\napp.post('/api/v1/login', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const userResult = await db.query('SELECT * FROM \"Person\" WHERE \"Email\" = $1', [email]);\n    if (userResult.rows.length === 0 || !userResult.rows[0].Password) {\n      return res.status(401).json({\n        status: 'fail',\n        msg: 'Invalid email or password.'\n      });\n    }\n    const user = userResult.rows[0];\n    const isMatch = await bcrypt.compare(password, user.Password);\n    if (!isMatch) return res.status(401).json({\n      status: 'fail',\n      msg: 'Invalid email or password.'\n    });\n    const payload = {\n      user: {\n        id: user.Person_ID\n      }\n    };\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\n      expiresIn: '5h'\n    });\n    res.status(200).json({\n      status: 'success',\n      token,\n      user: {\n        id: user.Person_ID,\n        name: user.Name,\n        email: user.Email,\n        isAuthor: user.Is_Author\n      },\n      role: user.Role || 'student'\n    });\n  } catch (err) {\n    console.error('Login error:', err.message);\n    res.status(500).json({\n      msg: 'Server error'\n    });\n  }\n});\n\n// --- USER-SPECIFIC ROUTES (Protected) ---\n\napp.get('/api/profile', authenticateJWT, async (req, res) => {\n  // This route seems complex but okay, leaving as is.\n  const userId = req.user.id;\n  try {\n    const personResult = await db.query(`SELECT p.\"Name\" as name, p.\"Email\" as email, p.\"Is_Author\" as \"isAuthor\", p.\"Birth_Date\" as \"birthDate\",\n              p.\"Holding\" as holding, p.\"Thana\" as thana, p.\"City\" as city, p.\"Postal_Code\" as \"postalCode\",\n              p.\"District\" as district, p.\"Country\" as country, t.\"Working\" as working, t.\"Teaching_Start_Date\" as \"teachingStartDate\"\n       FROM \"Person\" p LEFT JOIN \"Teacher\" t ON p.\"Person_ID\" = t.\"Teacher_ID\"\n       WHERE p.\"Person_ID\" = $1`, [userId]);\n    if (personResult.rows.length === 0) return res.status(404).json({\n      msg: 'User not found'\n    });\n    const userData = personResult.rows[0];\n    const eduResult = await db.query('SELECT \"Degree\" as degree, \"Subject\" as subject, \"Passing_Year\" as \"passingYear\", \"Grade\" as grade FROM \"Education_Qualification\" WHERE \"Person_ID\" = $1', [userId]);\n    const userProfile = {\n      name: userData.name,\n      email: userData.email,\n      isAuthor: userData.isAuthor,\n      avatarUrl: `https://placehold.co/150x150/a78bfa/ffffff?text=${(userData.name || 'U').charAt(0)}`,\n      personalInfo: {\n        birthDate: userData.birthDate\n      },\n      address: {\n        holding: userData.holding,\n        thana: userData.thana,\n        city: userData.city,\n        postalCode: userData.postalCode,\n        district: userData.district,\n        country: userData.country\n      },\n      professional: userData.working ? {\n        working: userData.working,\n        teachingStartDate: userData.teachingStartDate\n      } : null,\n      education: eduResult.rows.map(edu => ({\n        ...edu,\n        institution: 'University Name',\n        grade: edu.grade ? parseFloat(edu.grade).toFixed(2) : 'N/A',\n        passingYear: new Date(edu.passingYear).getFullYear().toString()\n      }))\n    };\n    res.json(userProfile);\n  } catch (err) {\n    console.error('Profile fetch error:', err.message);\n    res.status(500).json({\n      msg: 'Server Error'\n    });\n  }\n});\napp.post('/api/enroll', authenticateJWT, async (req, res) => {\n  const userId = req.user.id;\n  const {\n    courseId\n  } = req.body;\n  if (!courseId) return res.status(400).json({\n    error: 'Course ID is required.'\n  });\n  try {\n    const tranxId = Math.floor(Math.random() * 1000000000);\n    await db.query('INSERT INTO \"Enroll\" (\"Student_ID\", \"Course_ID\", \"Tranx_ID\") VALUES ($1, $2, $3) ON CONFLICT (\"Student_ID\", \"Course_ID\") DO NOTHING', [userId, courseId, tranxId]);\n    res.status(201).json({\n      success: true,\n      msg: 'Successfully enrolled.'\n    });\n  } catch (err) {\n    console.error('Enrollment error:', err.message);\n    res.status(500).json({\n      error: 'Server error during enrollment.'\n    });\n  }\n});\napp.get('/api/my-courses', authenticateJWT, async (req, res) => {\n  const userId = req.user.id;\n  try {\n    const result = await db.query(`SELECT c.\"Course_ID\", c.\"Title\", c.\"Description\", p.\"Name\" as instructor,\n              encode(c.\"Thumbnail\", 'base64') as thumbnail_base64 \n       FROM \"Enroll\" e\n       JOIN \"Course\" c ON e.\"Course_ID\" = c.\"Course_ID\"\n       JOIN \"Person\" p ON c.\"Author_ID\" = p.\"Person_ID\"\n       WHERE e.\"Student_ID\" = $1 ORDER BY c.\"Title\" ASC`, [userId]);\n    res.json({\n      courses: result.rows\n    });\n  } catch (err) {\n    console.error('Error fetching my courses:', err.message);\n    res.status(500).json({\n      error: 'Failed to load your courses.'\n    });\n  }\n});\napp.get('/api/teacher/my-courses', authenticateJWT, async (req, res) => {\n  const userId = req.user.id;\n  try {\n    const result = await db.query('SELECT \"Course_ID\", \"Title\", \"Description\", encode(\"Thumbnail\", \\'base64\\') as thumbnail_base64 FROM \"Course\" WHERE \"Author_ID\" = $1 ORDER BY \"Title\" ASC', [userId]);\n    res.json({\n      courses: result.rows\n    });\n  } catch (err) {\n    console.error('Error fetching teacher courses:', err.message);\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\n\n// Create course route with safe JSON parsing\napp.post('/api/teacher/courses', authenticateJWT, upload.single('thumbnail'), async (req, res) => {\n  const userId = req.user.id;\n  const {\n    title,\n    description,\n    price,\n    trailerLink\n  } = req.body;\n  if (!title || !price || !req.file || !req.body.subtopics) {\n    return res.status(400).json({\n      error: 'Missing required fields: title, price, thumbnail, and subtopics are required.'\n    });\n  }\n  let subtopics;\n  try {\n    subtopics = JSON.parse(req.body.subtopics);\n    if (!Array.isArray(subtopics)) throw new Error();\n  } catch (e) {\n    return res.status(400).json({\n      error: 'Invalid subtopics format. Must be a valid JSON array string.'\n    });\n  }\n  const client = await db.getClient();\n  try {\n    await client.query('BEGIN');\n    const courseResult = await client.query('INSERT INTO \"Course\" (\"Author_ID\", \"Title\", \"Description\", \"Price\", \"Thumbnail\", \"Head_Teacher_ID\", \"Creation_Date\") VALUES ($1, $2, $3, $4, $5, $1, NOW()) RETURNING \"Course_ID\"', [userId, title, description, price, req.file.buffer]);\n    const courseId = courseResult.rows[0].Course_ID;\n    if (trailerLink) {\n      const videoResult = await client.query('INSERT INTO \"Video\" (\"Course_ID\", \"Title\", \"Link\") VALUES ($1, $2, $3) RETURNING \"Video_ID\"', [courseId, `${title} - Trailer`, trailerLink]);\n      await client.query('UPDATE \"Course\" SET \"Trailer_ID\" = $1 WHERE \"Course_ID\" = $2', [videoResult.rows[0].Video_ID, courseId]);\n    }\n    for (const sub of subtopics) {\n      const subtopicResult = await client.query('INSERT INTO \"Sub_Topic\" (\"Course_ID\", \"Teacher_ID\", \"Title\") VALUES ($1, $2, $3) RETURNING \"Sub_Topic_ID\"', [courseId, userId, sub.title]);\n      const subTopicId = subtopicResult.rows[0].Sub_Topic_ID;\n      if (Array.isArray(sub.videos)) {\n        for (const v of sub.videos) {\n          if (v.title && v.link) await client.query('INSERT INTO \"Video\" (\"Sub_Topic_ID\", \"Course_ID\", \"Title\", \"Link\") VALUES ($1, $2, $3, $4)', [subTopicId, courseId, v.title, v.link]);\n        }\n      }\n      // Add similar loops for assignments and exams if they exist\n    }\n    await client.query('COMMIT');\n    res.status(201).json({\n      courseId\n    });\n  } catch (err) {\n    await client.query('ROLLBACK');\n    console.error('Create course error:', err.message);\n    res.status(500).json({\n      error: 'An error occurred while creating the course.'\n    });\n  } finally {\n    client.release();\n  }\n});\n\n// ... (other routes can be refactored similarly)\n\nconst port = process.env.PORT || 5001;\napp.listen(port, () => {\n  console.log(`Server is up and listening on port ${port}`);\n});","map":{"version":3,"names":["require","config","express","cors","db","bcrypt","jwt","multer","upload","storage","memoryStorage","app","use","json","req","res","next","console","log","Date","toISOString","method","originalUrl","authenticateJWT","authHeader","headers","authorization","startsWith","status","msg","token","split","process","env","JWT_SECRET","error","verify","err","decoded","message","user","id","get","result","query","results","rows","length","data","courses","params","courseResult","course","subtopicsResult","subtopics","Promise","all","map","sub","videosResult","Sub_Topic_ID","examsResult","title","Title","videos","v","exams","e","i","parseInt","description","Description","price","Price","instructor","instructorName","trailerLink","thumbnail_base64","structure","rating","reviews","Math","random","toFixed","post","fullName","email","password","birthdate","district","city","country","body","userExists","salt","genSalt","hashedPassword","hash","newUser","Person_ID","payload","sign","expiresIn","name","Name","Email","userResult","Password","isMatch","compare","isAuthor","Is_Author","role","Role","userId","personResult","userData","eduResult","userProfile","avatarUrl","charAt","personalInfo","birthDate","address","holding","thana","postalCode","professional","working","teachingStartDate","education","edu","institution","grade","parseFloat","passingYear","getFullYear","toString","courseId","tranxId","floor","success","single","file","JSON","parse","Array","isArray","Error","client","getClient","buffer","Course_ID","videoResult","Video_ID","subtopicResult","subTopicId","link","release","port","PORT","listen"],"sources":["E:/Database site/Project2/LearnIT/frontend/src/pages/MyCoursesPage.js"],"sourcesContent":["require('dotenv').config();\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst db = require('./db');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst multer = require('multer');\r\n\r\n// Configure multer to store files in memory\r\nconst upload = multer({ storage: multer.memoryStorage() });\r\n\r\nconst app = express();\r\n\r\n// --- Middleware ---\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Request logger middleware for debugging\r\napp.use((req, res, next) => {\r\n    console.log(`${new Date().toISOString()} - ${req.method} ${req.originalUrl}`);\r\n    next();\r\n});\r\n\r\n\r\n// --- JWT Authentication Middleware (More Robust) ---\r\nconst authenticateJWT = (req, res, next) => {\r\n  const authHeader = req.headers.authorization;\r\n\r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    return res.status(401).json({ msg: 'Authorization denied. Token is missing or malformed.' });\r\n  }\r\n\r\n  const token = authHeader.split(' ')[1];\r\n\r\n  if (!process.env.JWT_SECRET) {\r\n      console.error('FATAL ERROR: JWT_SECRET is not defined in the environment variables.');\r\n      return res.status(500).json({ msg: 'Server configuration error.' });\r\n  }\r\n\r\n  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {\r\n    if (err) {\r\n      console.error('JWT Verification Error:', err.message);\r\n      return res.status(401).json({ msg: 'Token is not valid or has expired.' });\r\n    }\r\n    \r\n    if (!decoded || !decoded.user || !decoded.user.id) {\r\n        console.error('Invalid token payload:', decoded);\r\n        return res.status(401).json({ msg: 'Token payload is invalid.' });\r\n    }\r\n\r\n    req.user = decoded.user;\r\n    next();\r\n  });\r\n};\r\n\r\n\r\n// --- COURSE ROUTES ---\r\n\r\n// Get all courses (Public)\r\napp.get('/api/v1/courses', async (req, res) => {\r\n  try {\r\n    const result = await db.query(`\r\n        SELECT \r\n            c.\"Course_ID\", c.\"Title\", c.\"Description\", c.\"Price\", \r\n            p.\"Name\" as instructor, encode(c.\"Thumbnail\", 'base64') as thumbnail_base64 \r\n        FROM \"Course\" c\r\n        JOIN \"Person\" p ON c.\"Author_ID\" = p.\"Person_ID\"\r\n        ORDER BY c.\"Creation_Date\" DESC\r\n    `);\r\n    res.status(200).json({\r\n      status: 'success',\r\n      results: result.rows.length,\r\n      data: { courses: result.rows },\r\n    });\r\n  } catch (err) {\r\n    console.error('Error fetching all courses:', err.message);\r\n    res.status(500).json({ msg: 'Server Error' });\r\n  }\r\n});\r\n\r\n// Get a single course's full details (Public)\r\napp.get('/api/v1/courses/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    try {\r\n        const courseResult = await db.query(\r\n            `SELECT c.\"Title\", c.\"Description\", c.\"Price\", p.\"Name\" as \"instructorName\",\r\n                    v.\"Link\" as \"trailerLink\", encode(c.\"Thumbnail\", 'base64') as \"thumbnail_base64\"\r\n             FROM \"Course\" c\r\n             JOIN \"Person\" p ON c.\"Author_ID\" = p.\"Person_ID\"\r\n             LEFT JOIN \"Video\" v ON c.\"Trailer_ID\" = v.\"Video_ID\"\r\n             WHERE c.\"Course_ID\" = $1`, [id]\r\n        );\r\n\r\n        if (courseResult.rows.length === 0) return res.status(404).json({ error: 'Course not found' });\r\n        const course = courseResult.rows[0];\r\n\r\n        const subtopicsResult = await db.query('SELECT \"Sub_Topic_ID\", \"Title\" FROM \"Sub_Topic\" WHERE \"Course_ID\" = $1 ORDER BY \"Sub_Topic_ID\"', [id]);\r\n        const subtopics = await Promise.all(subtopicsResult.rows.map(async (sub) => {\r\n            const videosResult = await db.query('SELECT \"Title\" FROM \"Video\" WHERE \"Sub_Topic_ID\" = $1 ORDER BY \"Video_ID\"', [sub.Sub_Topic_ID]);\r\n            const examsResult = await db.query('SELECT \"Exam_Link\" FROM \"Exam\" WHERE \"Sub_Topic_ID\" = $1 ORDER BY \"Exam_ID\"', [sub.Sub_Topic_ID]);\r\n            return {\r\n                id: sub.Sub_Topic_ID, title: sub.Title,\r\n                videos: videosResult.rows.map(v => v.Title),\r\n                exams: examsResult.rows.map((e, i) => `Quiz ${i + 1}`),\r\n            };\r\n        }));\r\n\r\n        res.json({\r\n            id: parseInt(id), title: course.Title, description: course.Description, price: course.Price,\r\n            instructor: course.instructorName, trailerLink: course.trailerLink, thumbnail_base64: course.thumbnail_base64,\r\n            structure: subtopics, rating: 4.7, reviews: (Math.random() * 2000).toFixed(0),\r\n        });\r\n    } catch (err) {\r\n        console.error(`Error fetching course ${id}:`, err.message);\r\n        res.status(500).json({ error: 'Server error' });\r\n    }\r\n});\r\n\r\n\r\n// --- AUTH ROUTES ---\r\n\r\napp.post('/api/auth/register', async (req, res) => {\r\n  const { fullName, email, password, birthdate, district, city, country } = req.body;\r\n  try {\r\n    const userExists = await db.query('SELECT * FROM \"Person\" WHERE \"Email\" = $1', [email]);\r\n    if (userExists.rows.length > 0) return res.status(400).json({ msg: 'User already exists' });\r\n    \r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n    \r\n    const newUser = await db.query(\r\n      'INSERT INTO \"Person\" (\"Name\", \"Email\", \"Password\", \"Birth_Date\", \"District\", \"City\", \"Country\") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING \"Person_ID\", \"Name\", \"Email\"',\r\n      [fullName, email, hashedPassword, birthdate, district, city, country]\r\n    );\r\n    const user = newUser.rows[0];\r\n    \r\n    await db.query('INSERT INTO \"Student\" (\"Student_ID\", \"Class\", \"Is_Banned\") VALUES ($1, $2, $3)', [user.Person_ID, 'General', false]);\r\n    \r\n    const payload = { user: { id: user.Person_ID } };\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '5h' });\r\n    \r\n    res.status(201).json({ token, user: { id: user.Person_ID, name: user.Name, email: user.Email } });\r\n  } catch (err) {\r\n    console.error('Registration error:', err.message);\r\n    res.status(500).json({ msg: 'Server Error' });\r\n  }\r\n});\r\n\r\napp.post('/api/v1/login', async (req, res) => {\r\n  const { email, password } = req.body; \r\n  try {\r\n    const userResult = await db.query('SELECT * FROM \"Person\" WHERE \"Email\" = $1', [email]); \r\n    if (userResult.rows.length === 0 || !userResult.rows[0].Password) { \r\n      return res.status(401).json({ status: 'fail', msg: 'Invalid email or password.' });\r\n    }\r\n    const user = userResult.rows[0];\r\n    const isMatch = await bcrypt.compare(password, user.Password);\r\n    if (!isMatch) return res.status(401).json({ status: 'fail', msg: 'Invalid email or password.' });\r\n\r\n    const payload = { user: { id: user.Person_ID } };\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '5h' });\r\n    \r\n    res.status(200).json({\r\n        status: 'success', token,\r\n        user: { id: user.Person_ID, name: user.Name, email: user.Email, isAuthor: user.Is_Author },\r\n        role: user.Role || 'student',\r\n    });\r\n  } catch (err) {\r\n    console.error('Login error:', err.message);\r\n    res.status(500).json({ msg: 'Server error' });\r\n  }\r\n});\r\n\r\n\r\n// --- USER-SPECIFIC ROUTES (Protected) ---\r\n\r\napp.get('/api/profile', authenticateJWT, async (req, res) => {\r\n  // This route seems complex but okay, leaving as is.\r\n  const userId = req.user.id;\r\n  try {\r\n    const personResult = await db.query(\r\n      `SELECT p.\"Name\" as name, p.\"Email\" as email, p.\"Is_Author\" as \"isAuthor\", p.\"Birth_Date\" as \"birthDate\",\r\n              p.\"Holding\" as holding, p.\"Thana\" as thana, p.\"City\" as city, p.\"Postal_Code\" as \"postalCode\",\r\n              p.\"District\" as district, p.\"Country\" as country, t.\"Working\" as working, t.\"Teaching_Start_Date\" as \"teachingStartDate\"\r\n       FROM \"Person\" p LEFT JOIN \"Teacher\" t ON p.\"Person_ID\" = t.\"Teacher_ID\"\r\n       WHERE p.\"Person_ID\" = $1`, [userId]\r\n    );\r\n    if (personResult.rows.length === 0) return res.status(404).json({ msg: 'User not found' });\r\n    const userData = personResult.rows[0];\r\n    const eduResult = await db.query('SELECT \"Degree\" as degree, \"Subject\" as subject, \"Passing_Year\" as \"passingYear\", \"Grade\" as grade FROM \"Education_Qualification\" WHERE \"Person_ID\" = $1', [userId]);\r\n    const userProfile = {\r\n      name: userData.name, email: userData.email, isAuthor: userData.isAuthor,\r\n      avatarUrl: `https://placehold.co/150x150/a78bfa/ffffff?text=${(userData.name || 'U').charAt(0)}`,\r\n      personalInfo: { birthDate: userData.birthDate },\r\n      address: { holding: userData.holding, thana: userData.thana, city: userData.city, postalCode: userData.postalCode, district: userData.district, country: userData.country },\r\n      professional: userData.working ? { working: userData.working, teachingStartDate: userData.teachingStartDate } : null,\r\n      education: eduResult.rows.map(edu => ({ ...edu, institution: 'University Name', grade: edu.grade ? parseFloat(edu.grade).toFixed(2) : 'N/A', passingYear: new Date(edu.passingYear).getFullYear().toString() })),\r\n    };\r\n    res.json(userProfile);\r\n  } catch (err) {\r\n    console.error('Profile fetch error:', err.message);\r\n    res.status(500).json({ msg: 'Server Error' });\r\n  }\r\n});\r\n\r\napp.post('/api/enroll', authenticateJWT, async (req, res) => {\r\n  const userId = req.user.id;\r\n  const { courseId } = req.body;\r\n  if (!courseId) return res.status(400).json({ error: 'Course ID is required.' });\r\n  try {\r\n    const tranxId = Math.floor(Math.random() * 1000000000);\r\n    await db.query(\r\n      'INSERT INTO \"Enroll\" (\"Student_ID\", \"Course_ID\", \"Tranx_ID\") VALUES ($1, $2, $3) ON CONFLICT (\"Student_ID\", \"Course_ID\") DO NOTHING',\r\n      [userId, courseId, tranxId]\r\n    );\r\n    res.status(201).json({ success: true, msg: 'Successfully enrolled.' });\r\n  } catch (err) {\r\n    console.error('Enrollment error:', err.message);\r\n    res.status(500).json({ error: 'Server error during enrollment.' });\r\n  }\r\n});\r\n\r\napp.get('/api/my-courses', authenticateJWT, async (req, res) => {\r\n  const userId = req.user.id;\r\n  try {\r\n    const result = await db.query(\r\n      `SELECT c.\"Course_ID\", c.\"Title\", c.\"Description\", p.\"Name\" as instructor,\r\n              encode(c.\"Thumbnail\", 'base64') as thumbnail_base64 \r\n       FROM \"Enroll\" e\r\n       JOIN \"Course\" c ON e.\"Course_ID\" = c.\"Course_ID\"\r\n       JOIN \"Person\" p ON c.\"Author_ID\" = p.\"Person_ID\"\r\n       WHERE e.\"Student_ID\" = $1 ORDER BY c.\"Title\" ASC`, [userId]\r\n    );\r\n    res.json({ courses: result.rows });\r\n  } catch (err) {\r\n    console.error('Error fetching my courses:', err.message);\r\n    res.status(500).json({ error: 'Failed to load your courses.' });\r\n  }\r\n});\r\n\r\napp.get('/api/teacher/my-courses', authenticateJWT, async (req, res) => {\r\n  const userId = req.user.id;\r\n  try {\r\n    const result = await db.query(\r\n      'SELECT \"Course_ID\", \"Title\", \"Description\", encode(\"Thumbnail\", \\'base64\\') as thumbnail_base64 FROM \"Course\" WHERE \"Author_ID\" = $1 ORDER BY \"Title\" ASC',\r\n      [userId]\r\n    );\r\n    res.json({ courses: result.rows });\r\n  } catch (err) {\r\n    console.error('Error fetching teacher courses:', err.message);\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n// Create course route with safe JSON parsing\r\napp.post('/api/teacher/courses', authenticateJWT, upload.single('thumbnail'), async (req, res) => {\r\n    const userId = req.user.id;\r\n    const { title, description, price, trailerLink } = req.body;\r\n\r\n    if (!title || !price || !req.file || !req.body.subtopics) {\r\n        return res.status(400).json({ error: 'Missing required fields: title, price, thumbnail, and subtopics are required.' });\r\n    }\r\n\r\n    let subtopics;\r\n    try {\r\n        subtopics = JSON.parse(req.body.subtopics);\r\n        if (!Array.isArray(subtopics)) throw new Error();\r\n    } catch (e) {\r\n        return res.status(400).json({ error: 'Invalid subtopics format. Must be a valid JSON array string.' });\r\n    }\r\n\r\n    const client = await db.getClient();\r\n    try {\r\n        await client.query('BEGIN');\r\n\r\n        const courseResult = await client.query(\r\n            'INSERT INTO \"Course\" (\"Author_ID\", \"Title\", \"Description\", \"Price\", \"Thumbnail\", \"Head_Teacher_ID\", \"Creation_Date\") VALUES ($1, $2, $3, $4, $5, $1, NOW()) RETURNING \"Course_ID\"',\r\n            [userId, title, description, price, req.file.buffer]\r\n        );\r\n        const courseId = courseResult.rows[0].Course_ID;\r\n\r\n        if (trailerLink) {\r\n            const videoResult = await client.query('INSERT INTO \"Video\" (\"Course_ID\", \"Title\", \"Link\") VALUES ($1, $2, $3) RETURNING \"Video_ID\"', [courseId, `${title} - Trailer`, trailerLink]);\r\n            await client.query('UPDATE \"Course\" SET \"Trailer_ID\" = $1 WHERE \"Course_ID\" = $2', [videoResult.rows[0].Video_ID, courseId]);\r\n        }\r\n\r\n        for (const sub of subtopics) {\r\n            const subtopicResult = await client.query('INSERT INTO \"Sub_Topic\" (\"Course_ID\", \"Teacher_ID\", \"Title\") VALUES ($1, $2, $3) RETURNING \"Sub_Topic_ID\"', [courseId, userId, sub.title]);\r\n            const subTopicId = subtopicResult.rows[0].Sub_Topic_ID;\r\n            if (Array.isArray(sub.videos)) {\r\n                for (const v of sub.videos) {\r\n                    if (v.title && v.link) await client.query('INSERT INTO \"Video\" (\"Sub_Topic_ID\", \"Course_ID\", \"Title\", \"Link\") VALUES ($1, $2, $3, $4)', [subTopicId, courseId, v.title, v.link]);\r\n                }\r\n            }\r\n            // Add similar loops for assignments and exams if they exist\r\n        }\r\n\r\n        await client.query('COMMIT');\r\n        res.status(201).json({ courseId });\r\n    } catch (err) {\r\n        await client.query('ROLLBACK');\r\n        console.error('Create course error:', err.message);\r\n        res.status(500).json({ error: 'An error occurred while creating the course.' });\r\n    } finally {\r\n        client.release();\r\n    }\r\n});\r\n\r\n\r\n// ... (other routes can be refactored similarly)\r\n\r\n\r\nconst port = process.env.PORT || 5001;\r\napp.listen(port, () => {\r\n  console.log(`Server is up and listening on port ${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}