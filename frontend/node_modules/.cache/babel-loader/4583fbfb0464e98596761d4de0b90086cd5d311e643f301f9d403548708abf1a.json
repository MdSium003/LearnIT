{"ast":null,"code":"// --- Gemini API Helper ---\nexport const callGeminiAPI = async promptText => {\n  // IMPORTANT: This will not work without a valid API key.\n  // Get a key from Google AI Studio: https://aistudio.google.com/\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY; // <-- PASTE YOUR GOOGLE AI API KEY HERE in .env\n  if (!apiKey) {\n    throw new Error(\"Gemini API key is missing. Please add REACT_APP_GEMINI_API_KEY to your .env file.\");\n  }\n  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;\n  const payload = {\n    contents: [{\n      role: \"user\",\n      parts: [{\n        text: promptText\n      }]\n    }]\n  };\n  try {\n    var _result$candidates$, _result$candidates$$c, _result$candidates$$c2;\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    if (!response.ok) {\n      var _errorBody$error;\n      const errorBody = await response.json();\n      console.error(\"Gemini API Error:\", errorBody);\n      throw new Error(`API request failed with status ${response.status}: ${((_errorBody$error = errorBody.error) === null || _errorBody$error === void 0 ? void 0 : _errorBody$error.message) || 'Unknown error'}`);\n    }\n    const result = await response.json();\n    if (result.candidates && (_result$candidates$ = result.candidates[0]) !== null && _result$candidates$ !== void 0 && (_result$candidates$$c = _result$candidates$.content) !== null && _result$candidates$$c !== void 0 && (_result$candidates$$c2 = _result$candidates$$c.parts) !== null && _result$candidates$$c2 !== void 0 && _result$candidates$$c2[0]) {\n      return result.candidates[0].content.parts[0].text;\n    } else {\n      console.error(\"Unexpected API response structure:\", result);\n      throw new Error(\"Failed to extract text from API response.\");\n    }\n  } catch (error) {\n    console.error(\"Error calling Gemini API:\", error);\n    throw error; // Re-throw to be caught by the caller\n  }\n};","map":{"version":3,"names":["callGeminiAPI","promptText","apiKey","process","env","REACT_APP_GEMINI_API_KEY","Error","apiUrl","payload","contents","role","parts","text","_result$candidates$","_result$candidates$$c","_result$candidates$$c2","response","fetch","method","headers","body","JSON","stringify","ok","_errorBody$error","errorBody","json","console","error","status","message","result","candidates","content"],"sources":["E:/Database site/Project2/udemy-clone-pern/frontend/src/utils/geminiApi.js"],"sourcesContent":["// --- Gemini API Helper ---\r\nexport const callGeminiAPI = async (promptText) => {\r\n  // IMPORTANT: This will not work without a valid API key.\r\n  // Get a key from Google AI Studio: https://aistudio.google.com/\r\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY; // <-- PASTE YOUR GOOGLE AI API KEY HERE in .env\r\n  if (!apiKey) {\r\n      throw new Error(\"Gemini API key is missing. Please add REACT_APP_GEMINI_API_KEY to your .env file.\");\r\n  }\r\n  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;\r\n\r\n  const payload = {\r\n    contents: [{ role: \"user\", parts: [{ text: promptText }] }],\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(apiUrl, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorBody = await response.json();\r\n      console.error(\"Gemini API Error:\", errorBody);\r\n      throw new Error(`API request failed with status ${response.status}: ${errorBody.error?.message || 'Unknown error'}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n\r\n    if (result.candidates && result.candidates[0]?.content?.parts?.[0]) {\r\n      return result.candidates[0].content.parts[0].text;\r\n    } else {\r\n      console.error(\"Unexpected API response structure:\", result);\r\n      throw new Error(\"Failed to extract text from API response.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error calling Gemini API:\", error);\r\n    throw error; // Re-throw to be caught by the caller\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,MAAOC,UAAU,IAAK;EACjD;EACA;EACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,CAAC,CAAC;EACrD,IAAI,CAACH,MAAM,EAAE;IACT,MAAM,IAAII,KAAK,CAAC,mFAAmF,CAAC;EACxG;EACA,MAAMC,MAAM,GAAG,uGAAuGL,MAAM,EAAE;EAE9H,MAAMM,OAAO,GAAG;IACdC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE,CAAC;QAAEC,IAAI,EAAEX;MAAW,CAAC;IAAE,CAAC;EAC5D,CAAC;EAED,IAAI;IAAA,IAAAY,mBAAA,EAAAC,qBAAA,EAAAC,sBAAA;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,MAAM,EAAE;MACnCW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACQ,QAAQ,CAACO,EAAE,EAAE;MAAA,IAAAC,gBAAA;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvCC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEH,SAAS,CAAC;MAC7C,MAAM,IAAInB,KAAK,CAAC,kCAAkCU,QAAQ,CAACa,MAAM,KAAK,EAAAL,gBAAA,GAAAC,SAAS,CAACG,KAAK,cAAAJ,gBAAA,uBAAfA,gBAAA,CAAiBM,OAAO,KAAI,eAAe,EAAE,CAAC;IACtH;IAEA,MAAMC,MAAM,GAAG,MAAMf,QAAQ,CAACU,IAAI,CAAC,CAAC;IAEpC,IAAIK,MAAM,CAACC,UAAU,KAAAnB,mBAAA,GAAIkB,MAAM,CAACC,UAAU,CAAC,CAAC,CAAC,cAAAnB,mBAAA,gBAAAC,qBAAA,GAApBD,mBAAA,CAAsBoB,OAAO,cAAAnB,qBAAA,gBAAAC,sBAAA,GAA7BD,qBAAA,CAA+BH,KAAK,cAAAI,sBAAA,eAApCA,sBAAA,CAAuC,CAAC,CAAC,EAAE;MAClE,OAAOgB,MAAM,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACtB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;IACnD,CAAC,MAAM;MACLe,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEG,MAAM,CAAC;MAC3D,MAAM,IAAIzB,KAAK,CAAC,2CAA2C,CAAC;IAC9D;EACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}