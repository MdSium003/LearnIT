{"ast":null,"code":"import { baseURL } from './apiClient'; // Import the single source of truth for the URL\n\n/**\r\n * A central wrapper for the native fetch API.\r\n * @param {string} endpoint - The API endpoint to call (e.g., '/api/teacher/my-courses').\r\n * @param {object} options - Optional fetch options (method, body, custom headers).\r\n * @returns {Promise<any>} - A promise that resolves with the JSON data.\r\n */\nexport const fetchClient = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const response = await fetch(`${baseURL}${endpoint}`, {\n    ...options,\n    headers\n  });\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      message: response.statusText\n    }));\n    throw new Error(errorData.message || 'An error occurred during the fetch operation.');\n  }\n  return response.json();\n};","map":{"version":3,"names":["baseURL","fetchClient","endpoint","options","token","localStorage","getItem","headers","response","fetch","ok","errorData","json","catch","message","statusText","Error"],"sources":["E:/Database site/Project2/LearnIT/frontend/src/api/fetchClient.js"],"sourcesContent":["import { baseURL } from './apiClient'; // Import the single source of truth for the URL\r\n\r\n/**\r\n * A central wrapper for the native fetch API.\r\n * @param {string} endpoint - The API endpoint to call (e.g., '/api/teacher/my-courses').\r\n * @param {object} options - Optional fetch options (method, body, custom headers).\r\n * @returns {Promise<any>} - A promise that resolves with the JSON data.\r\n */\r\nexport const fetchClient = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    ...options.headers,\r\n  };\r\n\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  const response = await fetch(`${baseURL}${endpoint}`, {\r\n    ...options,\r\n    headers,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({ message: response.statusText }));\r\n    throw new Error(errorData.message || 'An error occurred during the fetch operation.');\r\n  }\r\n\r\n  return response.json();\r\n};"],"mappings":"AAAA,SAASA,OAAO,QAAQ,aAAa,CAAC,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC3D,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,GAAGJ,OAAO,CAACI;EACb,CAAC;EAED,IAAIH,KAAK,EAAE;IACTG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EAC9C;EAEA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,OAAO,GAAGE,QAAQ,EAAE,EAAE;IACpD,GAAGC,OAAO;IACVI;EACF,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;MAAEC,OAAO,EAAEN,QAAQ,CAACO;IAAW,CAAC,CAAC,CAAC;IACvF,MAAM,IAAIC,KAAK,CAACL,SAAS,CAACG,OAAO,IAAI,+CAA+C,CAAC;EACvF;EAEA,OAAON,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}